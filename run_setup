#!/usr/bin/env zsh

echo "\nRunning Setup script via $0"
echo "ZSH_VERSION → $ZSH_VERSION"
echo "Current Shell → $(ps $$ -ocomm=)\n"

#######################################
# Colors ##############################
#######################################
CLRNC='\033[0m' # No Color
CLRHEAD='\033[1;36m'
CLRSUCCESS='\033[0;32m'
CLRINFO='\033[0;33m'

#######################################
# Utility Functions ###################
#######################################
# Prints a countdown to the terminal in seconds, e.g.,
# sleep_countdown # defaults to 10 seconds
# sleep_countdown 5 # 5 seconds
# sleep_countdown 5 "Start setup in" # 5 seconds, with a custom message
sleep_countdown() {
  secs=${1:-10}
  label=${2:-starting in}
  while [ $secs -gt 0 ]; do
    printf "\r$label $secs\033[0K"
    sleep 1
    : $((secs--))
  done
  printf "\n"
}

# check if a command exists, silently! (exists git && echo "git found" || echo "git not found")
# command -v behaves like which, but more resilient (https://stackoverflow.com/q/592620/2258480)
# $1 is the first parameter passed to the function exists git <- git = $1
# redirect to /dev/null (black hole, non existent) to avoid printing to stdout
# redirect standard error to first standard output (1 needs to be prepended by &, if redirectiong
# is on the right side)
function exists() {
  command -v $1 >/dev/null 2>&1
}

#######################################
# Script Start ########################
#######################################
echo "\n${CLRHEAD}=== Checking Apple Developer Tools${CLRNC}"
echo They are need to run some CLI apps, you cannot really bypass this step

[ -d "/Library/Developer/CommandLineTools/" ] && echo "${CLRSUCCESS}Developer Tools already installed${CLRNC}" || echo "${CLRINFO}Need to install Developer Tools, please re-run chezmoi after installation${CLRNC}"


echo "\n${CLRHEAD}=== Checking Brewfile${CLRNC}"
if [ -f "$HOME/.local/share/chezmoi/Brewfile" ]; then
  echo "${CLRSUCCESS}Brewfile found in ~/.local/share/chezmoi/Brewfile!${CLRNC}"
else
  # if brewfile not found ask the user to continue
  echo "${CLRINFO}Brewfile in ~/.local/share/chezmoi/Brewfile NOT found${CLRNC}"
  echo "${CLRINFO}Would you like to continue without Brewfile?${CLRNC}"
  select yn in "Yes" "No"; do
    case $yn in
      Yes ) echo "${CLRSUCCESS}Continuing without Brewfile. I will manually install my stuff${CLRNC}"; break;;
      No ) echo "${CLRSUCCESS}Exiting.${CLRNC} You can create a Brewfile on your old machine with: brew bundle dump --file=~/.local/share/chezmoi/Brewfile --force --describe"; exit;;
    esac
  done
fi

echo "\n${CLRHEAD}=== Checking Homebrew${CLRNC}"
exists brew && echo "${CLRSUCCESS}Homebrew is installed" || (echo "${CLRINFO}Homebrew is not installed" && echo "Installing Homebrew${CLRNC}" && /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)")
